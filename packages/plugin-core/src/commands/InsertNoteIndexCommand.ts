import { DENDRON_COMMANDS } from "../constants";
import { BasicCommand } from "./base";
import { DendronClientUtilsV2, VSCodeUtils } from "../utils";
import { DNodeUtils, NoteProps, NoteUtils } from "@dendronhq/common-all";
import { getEngine, getWS } from "../workspace";
import { window } from "vscode";
import _ from "lodash";

type CommandOpts = {
  /*
   * optional flag that will wrap the index block with markers.
   */
  marker?: boolean;
};

type CommandOutput = CommandOpts;

export class InsertNoteIndexCommand extends BasicCommand<
  CommandOpts,
  CommandOutput
> {
  key = DENDRON_COMMANDS.INSERT_NOTE_INDEX.key;

  // TODO: make this into a util once the cli version is implemented.
  // NOTE: the marker flag is not exposed to the plugin yet.
  genNoteIndex(
    notes: NoteProps[],
    opts: {
      marker?: boolean;
    }
  ) {
    const listItems = notes.map((note) => {
      const link = NoteUtils.createWikiLink({
        note,
        useVaultPrefix: DendronClientUtilsV2.shouldUseVaultPrefix(getEngine()),
      });
      return `- ${link}`;
    });
    let payload = ["## Index", listItems.join("\n")];
    if (opts.marker) {
      payload = [
        "<!-- Autogenerated Index Start -->",
        ...payload,
        "<!-- Autogenerated Index End -->",
      ];
    }
    return payload.join("\n");
  }

  async execute(opts: CommandOpts) {
    const ctx = "InsertNoteIndexCommand";
    this.L.info({ ctx, msg: "execute", opts });
    const maybeEditor = VSCodeUtils.getActiveTextEditor()!;
    if (_.isUndefined(maybeEditor)) {
      window.showErrorMessage(
        "No active text editor found. Try running this command in a Dendron note."
      );
      return opts;
    }
    const activeNote = VSCodeUtils.getNoteFromDocument(maybeEditor.document)!;
    if (_.isUndefined(activeNote)) {
      window.showErrorMessage("Active file is not a Dendron note.");
      return opts;
    }
    const engine = getEngine();
    const children = DNodeUtils.getChildren(activeNote, {
      nodeDict: engine.notes,
    });
    if (children.length === 0) {
      window.showInformationMessage("This note does not have any child notes.");
      return opts;
    }
    const maybeMarker = getWS().config.insertNoteIndex?.marker
    const noteIndex = this.genNoteIndex(children, {
      marker: _.isBoolean(maybeMarker) ? maybeMarker : opts.marker,
    });
    const current = maybeEditor.selection;
    await maybeEditor.edit((builder) => {
      builder.insert(current.start, noteIndex);
    });
    return opts;
  }
}
