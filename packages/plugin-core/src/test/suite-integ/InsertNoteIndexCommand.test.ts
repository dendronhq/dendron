import { ENGINE_HOOKS, TestConfigUtils } from "@dendronhq/engine-test-utils";
import { AssertUtils } from "@dendronhq/common-test-utils";
import * as vscode from "vscode";
import { describe } from "mocha";
import { InsertNoteIndexCommand } from "../../commands/InsertNoteIndexCommand";
import { VSCodeUtils } from "../../utils";
import { expect } from "../testUtilsv2";
import { runLegacyMultiWorkspaceTest, setupBeforeAfter } from "../testUtilsV3";
import { ConfigUtils } from "@dendronhq/common-all";

suite("InsertNoteIndex", function () {
  const ctx: vscode.ExtensionContext = setupBeforeAfter(this);

  describe("basic", () => {
    test("basic", (done) => {
      runLegacyMultiWorkspaceTest({
        ctx,
        preSetupHook: async ({ wsRoot, vaults }) => {
          await ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
        },
        onInit: async ({ engine }) => {
          const notes = engine.notes;
          const cmd = new InsertNoteIndexCommand();

          await VSCodeUtils.openNote(notes["foo"]);
          const editor = VSCodeUtils.getActiveTextEditorOrThrow();
          editor.selection = new vscode.Selection(9, 0, 9, 0);
          await cmd.execute({});
          const body = editor.document.getText();
          expect(
            await AssertUtils.assertInString({
              body,
              match: [["## Index", "- [[Ch1|foo.ch1]]"].join("\n")],
            })
          );
          done();
        },
      });
    });

    test("basic with markers", (done) => {
      runLegacyMultiWorkspaceTest({
        ctx,
        preSetupHook: async ({ wsRoot, vaults }) => {
          await ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
        },
        onInit: async ({ engine }) => {
          const notes = engine.notes;
          const cmd = new InsertNoteIndexCommand();

          await VSCodeUtils.openNote(notes["foo"]);
          const editor = VSCodeUtils.getActiveTextEditorOrThrow();
          editor.selection = new vscode.Selection(9, 0, 9, 0);
          await cmd.execute({ marker: true });
          const body = editor.document.getText();
          expect(
            await AssertUtils.assertInString({
              body,
              match: [
                [
                  "<!-- Autogenerated Index Start -->",
                  "## Index",
                  "- [[Ch1|foo.ch1]]",
                  "<!-- Autogenerated Index End -->",
                ].join("\n"),
              ],
            })
          );
          done();
        },
      });
    });
  });

  describe("non-basic cases", () => {
    test("noXVaultWikiLink: false", (done) => {
      runLegacyMultiWorkspaceTest({
        ctx,
        preSetupHook: async ({ wsRoot, vaults }) => {
          await ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
        },
        onInit: async ({ wsRoot, engine }) => {
          TestConfigUtils.withConfig(
            (config) => {
              ConfigUtils.setWorkspaceProp(
                config,
                "enableXVaultWikiLink",
                true
              );
              return config;
            },
            { wsRoot }
          );

          const notes = engine.notes;
          const cmd = new InsertNoteIndexCommand();

          await VSCodeUtils.openNote(notes["foo"]);
          const editor = VSCodeUtils.getActiveTextEditorOrThrow();
          editor.selection = new vscode.Selection(9, 0, 9, 0);
          await cmd.execute({});
          const body = editor.document.getText();
          expect(
            await AssertUtils.assertInString({
              body,
              match: [
                ["## Index", "- [[Ch1|dendron://vault1/foo.ch1]]"].join("\n"),
              ],
            })
          );
          done();
        },
      });
    });

    test("insertNoteIndex.marker: true", (done) => {
      runLegacyMultiWorkspaceTest({
        ctx,
        preSetupHook: async ({ wsRoot, vaults }) => {
          await ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
        },
        onInit: async ({ wsRoot, engine }) => {
          TestConfigUtils.withConfig(
            (config) => {
              ConfigUtils.setCommandsProp(config, "insertNoteIndex", {
                enableMarker: true,
              });
              return config;
            },
            { wsRoot }
          );

          const notes = engine.notes;
          const cmd = new InsertNoteIndexCommand();

          await VSCodeUtils.openNote(notes["foo"]);
          const editor = VSCodeUtils.getActiveTextEditorOrThrow();
          editor.selection = new vscode.Selection(9, 0, 9, 0);
          await cmd.execute({});
          const body = editor.document.getText();
          expect(
            await AssertUtils.assertInString({
              body,
              match: [
                [
                  "<!-- Autogenerated Index Start -->",
                  "## Index",
                  "- [[Ch1|foo.ch1]]",
                  "<!-- Autogenerated Index End -->",
                ].join("\n"),
              ],
            })
          );
          done();
        },
      });
    });
  });
});
