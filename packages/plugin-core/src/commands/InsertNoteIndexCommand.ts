import { DENDRON_COMMANDS } from "../constants";
import { BasicCommand } from "./base";
import { VSCodeUtils } from "../utils";
import { DNodeUtils, NoteProps } from "@dendronhq/common-all";
import { getEngine } from "../workspace";

type CommandOpts = {
  /*
   * optional flag that will wrap the index block with markers.
   */
  marker?: boolean;
};

type CommandOutput = CommandOpts;

export class InsertNoteIndexCommand extends BasicCommand<
  CommandOpts,
  CommandOutput
> {
  key = DENDRON_COMMANDS.INSERT_NOTE_INDEX.key;

  // TODO: make this into a util once the cli version is implemented.
  // NOTE: the marker flag is not exposed to the plugin yet.
  genNoteIndex(notes: NoteProps[], opts: {
    marker?: boolean
  }) {
    const listItems = notes.map((note) => `- [[${note.title}\|${note.fname}]]`)
    let payload = [
      "## Index",
      listItems.join("\n"),
    ];
    if (opts.marker) {
      payload = [
        "<!-- Autogenerated Index Start -->",
        ...payload,
        "<!-- Autogenerated Index End -->"
      ];
    }
    return payload.join("\n");
  }

  async execute(opts: CommandOpts) {
    const ctx = "InsertNoteIndexCommand";
    this.L.info({ ctx, msg: "execute", opts });
    const editor = VSCodeUtils.getActiveTextEditor()!;
    const activeNote = VSCodeUtils.getNoteFromDocument(editor.document)!;
    const engine = getEngine();
    const children = DNodeUtils.getChildren(activeNote, { nodeDict: engine.notes });
    const noteIndex = this.genNoteIndex(children, {
      marker: opts.marker
    });
    const current = editor.selection;
    await editor.edit((builder) => {
      builder.insert(current.start, noteIndex);
    });
    return opts;
  }
}
