export type Config = {
  type: string;
  group: string;
  description: string;
  default?: any;
  enum?: string[];
};

export const dendronConfig: { [key: string]: Config } = {
  version: {
    type: "number",
    group: "global",
    description: "version number",
  },
  enableFMTitle: {
    type: "boolean",
    group: "global",
    description: "Insert frontmatter title of note to the body",
  },
  enableNoteTitleForLink: {
    type: "boolean",
    group: "global",
    description: "Enable rendering of naked links as the title of the note",
  },
  enableMermaid: {
    type: "boolean",
    group: "global",
    description: "Enable the use of mermaid for rendering diagrams.",
  },
  enablePrettyRefs: {
    type: "boolean",
    group: "global",
    description: "Enable rendering note references as pretty refs.",
  },
  enableKatex: {
    type: "boolean",
    group: "global",
    description: "Enable the use of katex for rendering math.",
  },
  enableBackLinks: {
    type: "boolean",
    group: "global",
    description: "Notes will render backlinks",
  },
  enableChildLinks: {
    type: "boolean",
    group: "global",
    description: "Notes will render child links",
  },
  "dev.enablePreviewV2": {
    type: "boolean",
    group: "dev",
    description: "Enable new preview as default",
  },
  "dev.nextServerUrl": {
    type: "string",
    group: "dev",
    description: "Custom next server",
  },
  "dev.nextStaticRoot": {
    type: "string",
    group: "dev",
    description: "Static assets for next",
  },
  "dev.engineServerPort": {
    type: "number",
    group: "dev",
    description:
      "What port to use for engine server. Default behavior is to create at startup",
  },
  "dev.enableLinkCandidates": {
    type: "boolean",
    group: "dev",
    description:
      "Enable displaying and indexing link candidates. Default is false",
  },
  "dev.forceWatcherType": {
    type: "select",
    group: "dev",
    enum: ["plugin", "engine"],
    description:
      "Force the use of a specific type of watcher.\n\n- plugin: Uses VSCode's builtin watcher\n- engine: Uses the engine watcher, watching the files directly without VSCode",
  },
  "dev.enableExportPodV2": {
    type: "boolean",
    group: "dev",
    description: "Enable export pod v2",
  },
  "dev.enableSelfContainedVaults": {
    type: "boolean",
    description:
      "Sets self contained vaults as the default vault type. Dendron can read self-contained vaults even if this option is not enabled, but it will only create self contained vaults if this option is enabled.",
    group: "dev",
  },
  "commands.lookup.note.selectionMode": {
    type: "select",
    group: "commands",
    enum: ["extract", "link", "none"],
    description:
      "String literal type generated from  {@link  NoteLookupSelectionBehaviorEnum }",
  },
  "commands.lookup.note.vaultSelectionModeOnCreate": {
    type: "select",
    enum: ["smart", "alwaysPrompt"],
    group: "commands",
    description:
      "Whether to smartly guess the vault for the note when creating new note",
  },
  "commands.lookup.note.leaveTrace": {
    type: "boolean",
    group: "commands",
    description:
      "Leaves a reference of the destination note in the source note while using selectionExtract",
  },
  "commands.lookup.note.bubbleUpCreateNew": {
    type: "boolean",
    group: "commands",
    description: "Put `Create New` at the top of the lookup result.",
  },
  "commands.lookup.note.fuzzThreshold": {
    type: "number",
    group: "commands",
    description: "Sets the fuzziness level of lookup",
  },
  "commands.randomNote.include": {
    type: "array",
    group: "commands",
    description: "Hierarchies to include when opening a random note",
  },
  "commands.randomNote.exclude": {
    type: "array",
    group: "commands",
    description: "Hierarchies not to include when opening a random note",
  },
  "commands.insertNoteLink.aliasMode": {
    type: "select",
    enum: ["snippet", "selection", "title", "prompt", "none"],
    group: "commands",
    description: "Enum definitions of possible alias mode values",
  },
  "commands.insertNoteLink.enableMultiSelect": {
    type: "boolean",
    group: "commands",
    description: "Enable multi-select when inserting note links",
  },
  "commands.insertNoteIndex.enableMarker": {
    type: "boolean",
    group: "commands",
    description: `Insert note index between autogenerated markers`,
  },
  "commands.copyNoteLink.nonNoteFile.anchorType": {
    type: "select",
    enum: ["line", "block", "prompt"],
    group: "commands",
    description:
      'Copy note link settings for non-note files: "line" uses line numbers (`L23`), "block" inserts block anchors (`^xf1g...`). "prompt" means prompt the user to select one.',
  },
  "commands.templateHierarchy": {
    type: "string",
    group: "commands",
    description:
      "Default template hiearchy used when running commands like `Apply template`. Default is 'template'",
  },
  "workspace.dendronVersion": {
    type: "string",
    group: "workspace",
    description: "Dendron version. Set up by plugin.",
  },
  "workspace.journal.dailyDomain": {
    type: "string",
    description: "Domain where the journal notes are created",
    group: "workspace",
  },
  "workspace.journal.dailyVault": {
    type: "string",
    group: "workspace",
    description: "Name of vault where daily journal should be in",
  },
  "workspace.journal.name": {
    type: "string",
    group: "workspace",
    description: "Name used for journal notes",
  },
  "workspace.journal.dateFormat": {
    type: "string",
    group: "workspace",
    description: "Date format used for journal notes",
  },
  "workspace.journal.addBehavior": {
    type: "select",
    group: "workspace",
    description: "Enum definition of possible note add behavior values.",
    enum: [
      "childOfDomain",
      "childOfDomainNamespace",
      "childOfCurrent",
      "asOwnDomain",
    ],
  },
  "workspace.scratch.name": {
    type: "string",
    group: "workspace",
    description: "Name used for scratch notes",
  },
  "workspace.scratch.dateFormat": {
    type: "string",
    group: "workspace",
    description: "Date format used for scratch notes",
  },
  "workspace.scratch.addBehavior": {
    type: "select",
    group: "workspace",
    description: "Enum definition of possible note add behavior values.",
    enum: [
      "childOfDomain",
      "childOfDomainNamespace",
      "childOfCurrent",
      "asOwnDomain",
    ],
  },
  "workspace.task.name": {
    type: "string",
    group: "workspace",
    description: "Name used for task notes",
  },
  "workspace.task.dateFormat": {
    type: "string",
    group: "workspace",
    description: "Date format used for task notes",
  },
  "workspace.task.addBehavior": {
    type: "select",
    enum: [
      "childOfDomain",
      "childOfDomainNamespace",
      "childOfCurrent",
      "asOwnDomain",
    ],
    group: "workspace",
    description: "Enum definition of possible note add behavior values.",
  },
  "workspace.task.prioritySymbols": {
    type: "list",
    group: "workspace",
    description:
      'Maps symbols in the "priority" frontmatter property to a symbol, word, or sentence. This will be used to display that priority to the users.',
  },
  "workspace.task.statusSymbols": {
    type: "list",
    group: "workspace",
    description:
      'Maps symbols in the "status" frontmatter property to a symbol, word, or sentence. This will be used to display that status to the users.',
  },
  "workspace.task.todoIntegration": {
    type: "boolean",
    group: "workspace",
    description:
      'Add a "TODO: <note title>" entry to the frontmatter of task notes. This can simplify integration with various Todo extensions like Todo Tree.',
  },
  "workspace.task.createTaskSelectionType": {
    type: "select",
    group: "workspace",
    enum: ["selection2link", "selectionExtract", "none"],
    description:
      "The default selection type to use in Create Task Note command.",
  },
  "workspace.task.taskCompleteStatus": {
    type: "array",
    group: "workspace",
    description:
      "If the note state is set to any of these values, the note is considered to be done.",
  },
  "workspace.vaults": {
    type: "object",
    group: "workspace",
    description: "Vaults in workspace",
  },
  "workspace.hooks": {
    type: "object",
    group: "workspace",
    description: "Hooks",
  },
  "workspace.seeds": {
    type: "object",
    group: "workspace",
    description: "Seeds",
  },
  "workspace.workspaces": {
    type: "object",
    group: "workspace",
    description: "Workspaces",
  },
  "workspace.graph.zoomSpeed": {
    type: "number",
    group: "workspace",
    description:
      "The speed at which the graph zooms in and out. Lower is slower, higher is faster.",
  },
  "workspace.graph.createStub": {
    type: "boolean",
    group: "workspace",
    description:
      "If true, create a note if it hasn't been created already when clicked on a graph node",
  },
  "workspace.disableTelemetry": {
    type: "boolean",
    description: `Disable telemetry that collects usage data to help improve Dendron.`,
    group: "workspace",
  },
  "workspace.enableAutoCreateOnDefinition": {
    type: "boolean",
    group: "workspace",
    description: "Automatically create note when looking up definition",
  },
  "workspace.enableXVaultWikiLink": {
    type: "boolean",
    group: "workspace",
    description: "Enable cross-vault wikilinks",
  },
  "workspace.enableHandlebarTemplates": {
    type: "boolean",
    group: "workspace",
    description: "Enable handlebar style templates",
  },
  "workspace.enableRemoteVaultInit": {
    type: "boolean",
    group: "workspace",
    description: "Enable initializing remote vaults on startup.",
  },
  "workspace.enableAutoFoldFrontmatter": {
    type: "boolean",
    group: "workspace",
    description:
      "Enable Automatically folding frontmatter block when opening a new note.",
  },
  "workspace.enableEditorDecorations": {
    type: "boolean",
    group: "workspace",
    description:
      "Enable editor decorations, which highlight wikilinks, add colors for hashtags and more as you write your code.",
  },
  "workspace.maxPreviewsCached": {
    type: "number",
    group: "workspace",
    description: "Maximum number of rendered previews to cache.",
  },
  "workspace.maxNoteLength": {
    type: "number",
    group: "workspace",
    description:
      "Maximum number of characters in a note. Notes with characters exceeding this number will have some Dendron features disabled.",
  },
  "workspace.feedback": {
    type: "boolean",
    group: "workspace",
    description: "Enable feedback widget.",
  },
  "workspace.apiEndpoint": {
    type: "string",
    group: "workspace",
    description: "Endpoint for backend API functionality.",
  },
  "workspace.enableUserTags": {
    type: "boolean",
    group: "workspace",
    description:
      "Enable user tags, which allows @name to link to the note user.name",
  },
  "workspace.enableHashTags": {
    type: "boolean",
    group: "workspace",
    description:
      "Enable hashtags, which allows #word to link to the note tags.word",
  },
  "workspace.enableFullHierarchyNoteTitle": {
    type: "boolean",
    group: "workspace",
    description:
      "When enabled, the full hierarchy position of a note is used to generate the note title",
  },
  "workspace.workspaceVaultSyncMode": {
    group: "workspace",
    type: "select",
    enum: ["skip", "noPush", "noCommit", "sync"],
    description:
      "When enabled, the full hierarchy position of a note is used to generate the note title",
  },
  "preview.enableFMTitle": {
    type: "boolean",
    group: "preview",
    description: "Insert frontmatter title of note to the body",
  },
  "preview.enableNoteTitleForLink": {
    type: "boolean",
    group: "preview",
    description: "Enable rendering of naked links as the title of the note",
  },
  "preview.enableFrontmatterTags": {
    type: "boolean",
    group: "preview",
    description: "Show Frontmatter tags in published site.",
  },
  "preview.enableHashesForFMTags": {
    type: "boolean",
    group: "preview",
    description:
      "Display a '#' symbol in front of frontmatter tags in the tags listing.",
  },
  "preview.enableMermaid": {
    type: "boolean",
    group: "preview",
    description: "Enable the use of mermaid for rendering diagrams.",
  },
  "preview.enablePrettyRefs": {
    type: "boolean",
    group: "preview",
    description: "Enable rendering note references as pretty refs.",
  },
  "preview.enableKatex": {
    type: "boolean",
    group: "preview",
    description: "Enable the use of katex for rendering math.",
  },
  "preview.automaticallyShowPreview": {
    type: "boolean",
    group: "preview",
    description:
      "Automatically show preview when opening VSCode and switching between notes.",
  },
  "preview.theme": {
    type: "select",
    enum: ["dark", "light", "custom"],
    group: "preview",
    description:
      "The theme to use in the preview. If unset, preview will follow your editor theme for light or dark mode. If you are using a custom theme, make sure to create the CSS file too.",
  },
  "publishing.enableFMTitle": {
    type: "boolean",
    group: "publishing",
    description: "Insert frontmatter title of note to the body",
  },
  "publishing.enableNoteTitleForLink": {
    type: "boolean",
    group: "publishing",
    description: "Enable rendering of naked links as the title of the note",
  },
  "publishing.enableFrontmatterTags": {
    type: "boolean",
    group: "publishing",
    description: "Show Frontmatter tags in published site.",
  },
  "publishing.enableHashesForFMTags": {
    type: "boolean",
    group: "publishing",
    description:
      "Display a '#' symbol in front of frontmatter tags in the tags listing.",
  },
  "publishing.enableMermaid": {
    type: "boolean",
    group: "publishing",
    description: "Enable the use of mermaid for rendering diagrams.",
  },
  "publishing.enablePrettyRefs": {
    type: "boolean",
    group: "publishing",
    description: "Enable rendering note references as pretty refs.",
  },
  "publishing.enableKatex": {
    type: "boolean",
    group: "publishing",
    description: "Enable the use of katex for rendering math.",
  },
  "publishing.enableHierarchyDisplay": {
    type: "boolean",
    group: "publishing",
    description:
      "Enable rendering of children link block at the end of the note.",
  },
  "publishing.hierarchyDisplayTitle": {
    type: "string",
    group: "publishing",
    description: "Title to display for the children links block.",
  },
  "publishing.assetsPrefix": {
    type: "string",
    group: "publishing",
    description: "Prefix for assets for publishing.",
  },
  "publishing.canonicalBaseUrl": {
    type: "string",
    group: "publishing",
    description:
      "The base URL used for generating canonical URLs from each page for publishing.",
  },
  "publishing.copyAssets": {
    type: "boolean",
    group: "publishing",
    description: "Copy assets from vault to published site.",
  },
  "publishing.customHeaderPath": {
    type: "string",
    group: "publishing",
    description:
      "Path to the custom header file to include in each published notes.",
  },
  "publishing.ga.tracking": {
    type: "string",
    group: "publishing",
    description: "Google Analytics tracking number.",
  },
  "publishing.siteFaviconPath": {
    type: "string",
    group: "publishing",
    description: "Path to favicon relative to the workspace.",
  },
  "publishing.logoPath": {
    type: "string",
    group: "publishing",
    description: "Path to the site logo.",
  },
  "publishing.siteIndex": {
    type: "string",
    group: "publishing",
    description: "The domain of your `siteHierarhcies` page.",
  },
  "publishing.siteHierarchies": {
    type: "array",
    group: "publishing",
    description: "List of hierarchies to publish.",
  },
  "publishing.enableSiteLastModified": {
    type: "boolean",
    group: "publishing",
    description: "Show last modified timestamp on the site",
  },
  "publishing.siteRootDir": {
    type: "string",
    group: "publishing",
    description:
      "Where your site will be published, relative to the Dendron workspace.",
  },
  "publishing.siteUrl": {
    type: "string",
    group: "publishing",
    description: "URL of the site without trailing slash.",
  },
  "publishing.enableBackLinks": {
    type: "boolean",
    group: "publishing",
    description: "Notes will render backlinks",
  },
  "publishing.enableRandomlyColoredTags": {
    type: "boolean",
    group: "publishing",
    description: "Display randomly generated colors for tags",
  },
  "publishing.writeStubs": {
    type: "boolean",
    group: "publishing",
    description:
      "Write stub notes to disk when publishing. If this is set to fale, stub notes will be published with a different id each time.",
  },
  "publishing.seo.title": {
    type: "string",
    group: "publishing",
    description: "Set SEO title.",
  },
  "publishing.seo.description": {
    type: "string",
    group: "publishing",
    description: "Set SEO description.",
  },
  "publishing.seo.author": {
    type: "string",
    group: "publishing",
    description: "Set SEO author.",
  },
  "publishing.seo.twitter": {
    type: "string",
    group: "publishing",
    description: "Set SEO twitter.",
  },
  "publishing.seo.image.url": {
    type: "string",
    group: "publishing",
    description: "URL of image",
  },
  "publishing.seo.image.alt": {
    type: "string",
    group: "publishing",
    description: "alt text for image",
  },
  "publishing.github.cname": {
    type: "string",
    group: "publishing",
    description: "CNAME used for Github Pages",
  },
  "publishing.github.enableEditLink": {
    type: "boolean",
    group: "publishing",
    description: "Add a link to Github where you can edit the page",
  },
  "publishing.github.editLinkText": {
    type: "string",
    group: "publishing",
    description: "Text to use for the Github edit link.",
  },
  "publishing.github.editBranch": {
    type: "string",
    group: "publishing",
    description: "Branch that the stie is served from.",
  },
  "publishing.github.editViewMode": {
    type: "select",
    enum: ["tree", "edit"],
    group: "publishing",
    description:
      "Links directly to edit mode with edit and to Github page with tree mode",
  },
  "publishing.github.editRepository": {
    type: "string",
    group: "publishing",
    description:
      "URL of the Github repository. This value will be ignored if you are using remote vaults.",
  },
  "publishing.segmentKey": {
    type: "string",
    group: "publishing",
    description: "Value of the Segment API key.",
  },
  "publishing.cognitoUserPoolId": {
    type: "string",
    group: "publishing",
    description: "Value of Cognito user pool ID.",
  },
  "publishing.cognitoClientId": {
    type: "string",
    group: "publishing",
    description: "Value of Cognito client ID.",
  },
  "publishing.enablePrettyLinks": {
    type: "boolean",
    group: "publishing",
    description: "Note links are published without the .html file extension.",
  },
  "publishing.enableTaskNotes": {
    type: "boolean",
    group: "publishing",
    description:
      "Task notes will have checkboxes, owner information and more displayed on links leading to them. This applies both in preview and publishing.",
  },
  "publishing.theme": {
    type: "select",
    enum: ["dark", "light", "custom"],
    group: "publishing",
    description:
      "The theme to use when publishing the site. If you are using a custom theme, make sure to create the CSS file too.",
  },
  "publishing.siteBanner": {
    type: "string",
    group: "publishing",
    description: "Add a custom banner to the site. EXPERIMENTAL: do not use",
  },
  "publishing.duplicateNoteBehavior": {
    type: "object",
    group: "publishing",
    description:
      "How duplicate notes are handled when publishing a multi-vault workspace.",
  },
  "publishing.hierarchy": {
    type: "object",
    group: "publishing",
    description: "Control publication on a per-hierarchy basis",
  },
};
