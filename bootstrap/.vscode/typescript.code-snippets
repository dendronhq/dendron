{
	// Place your dendron-root workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"cl.logs": {
		"scope": "typescript",
		"prefix": "cl.logs",
		"body": [
			"console.log(ctx.logPath)",
		],
		"description": "Log output to console"
	},
	"qa.server": {
		"scope": "typescript",
		"prefix": "qa.server",
		"body": [
			"configOverride: {",
			"\"dendron.serverPort\": 3005",
			"}",
		],
		"description": "Log output to console"
	},
	"tentry": {
		"prefix": "tentry",
		"body": [
		  "new TestPresetEntry({",
		  "  label: \"$0\",",
		  "  preSetupHook: async({vaults, wsRoot}) => {",
		  "  },",
		  "  postSetupHook: async({vaults, wsRoot}) => {",
		  "  },",
		  "  results: async ({ }: { }) => {",
		  "    return [];",
		  "  }",
		  "})",
		  ""
		],
		"description": ""
	  },
	  "den.presetup": {
		"prefix": "den.presetup",
		"body": [
		  "async ({ vaults, wsRoot }) => {",
		  "  await NoteTestUtilsV4.createNote({ fname: \"foo\", vault: vaults[0], wsRoot });",
		  "  await NoteTestUtilsV4.createSchema({",
		  "    fname: \"foo\",",
		  "    vault: vaults[0],",
		  "    wsRoot,",
		  "  });",
		  "  await NoteTestUtilsV4.createNote({ fname: \"bar\", vault: vaults[1], wsRoot });",
		  "  await NoteTestUtilsV4.createSchema({",
		  "    fname: \"bar\",",
		  "    vault: vaults[1],",
		  "    wsRoot,",
		  "  });",
		  "}"
		],
		"description": ""
	  },
	  "den.run-engine-test": {
		"prefix": "den.run-engine-test",
		"body": [
		  "await runEngineTestV4(",
		  "  async ({ vaults, engine }) => {",
		  "    let note = NoteUtilsV2.create({ fname: \"alpha\", vault: vaults[1] });",
		  "    await engine.writeNote(note);",
		  "    const root = NoteUtilsV2.getNotesByFname({",
		  "      fname: \"root\",",
		  "      notes: engine.notes,",
		  "      vault: vaults[1],",
		  "    })[0] as NotePropsV2;",
		  "    const newNote = NoteUtilsV2.getNotesByFname({",
		  "      fname: \"alpha\",",
		  "      notes: engine.notes,",
		  "      vault: vaults[1],",
		  "    })[0] as NotePropsV2;",
		  "    const results = [",
		  "      {",
		  "        actual: root.children.length,",
		  "        expected: 1,",
		  "      },",
		  "      {",
		  "        actual: newNote.parent,",
		  "        expected: root.id,",
		  "      },",
		  "    ] as TestResult[];",
		  "    await runJestHarnessV2(results, expect);",
		  "  },",
		  "  {",
		  "    createEngine,",
		  "  }",
		  ");"
		],
		"description": ""
	  },
	  "den.preset.engine": {
		"prefix": "den.preset.engine",
		"body": [
		  "import { NotePropsV2, NoteUtilsV2 } from \"@dendronhq/common-all\";",
		  "import _ from \"lodash\";",
		  "import { NoteTestUtilsV4 } from \"../../noteUtils\";",
		  "import { TestPresetEntryV4 } from \"../../utilsv2\";",
		  "",
		  "const NOTES = {",
		  "  NOTE_NO_CHILDREN: new TestPresetEntryV4(",
		  "    async ({ wsRoot, vaults, engine }) => {",
		  "      return [",
		  "      ];",
		  "      return [{}];",
		  "    },",
		  "    {",
		  "      preSetupHook: async ({ vaults, wsRoot }) => {",
		  "        await NoteTestUtilsV4.createNote({",
		  "          fname: \"foo\",",
		  "          vault: vaults[0],",
		  "          wsRoot,",
		  "          body: \"old body\",",
		  "        });",
		  "      },",
		  "    }",
		  "  ),",
		  "};",
		  "export const ENGINE_UPDATE_PRESETS = {",
		  "  NOTES,",
		  "};",
		  ""
		],
		"description": ""
	  },
	  "den.test.vault": {
		"prefix": "den.test.vault",
		"body": [
		  "const checkVault = await FileTestUtils.assertInVault({",
		  "    wsRoot,",
		  "    vault",
		  "    match: [],",
		  "    nomatch: [],",
		  "  });"
		],
		"description": ""
	  }
}
