# Builds and publishes the release. This will publish packages to npm and
# publish the release extension to the VS Code and Open VSX Marketplaces. This
# is manually triggered once the release build is smoke-tested and ready for
# release.
name: Proto

on: workflow_dispatch

jobs:
  build:
    environment: plugin-development
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Gather environment data
        run: |
          node --version
          npm --version
          yarn --version

      - name: Configure Git user
        run: |
          git config --global user.name github.actions
          git config --global user.email github-actions@github.com

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Yarn Setup
        run: yarn setup

      - name: Set Up Yarn Local Registry
        run: yarn config set registry http://localhost:4873

      - name: Set Up NPM Local Registry
        run: |
          npm set registry http://localhost:4873/

      - name: Set Environment Variables
        run: |
          echo "DENDRON_RELEASE_VERSION=`cat meta.json | jq -r '.["@dendronhq/plugin-core"]' | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{$NF=sprintf("%0*d", length($NF), ($NF+1)); print}'`" >> $GITHUB_ENV
          echo "GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" >> $GITHUB_ENV
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV
          echo "VSIX_PATH=./packages/plugin-core/dendron-${{ env.DENDRON_RELEASE_VERSION }}.vsix" >> $GITHUB_ENV

      - name: Build the VSIX
        run: |
          echo ${{ env.DENDRON_RELEASE_VERSION }}
          echo ${{ env.VSIX_PATH }}
          yarn build:patch:local:ci

      - name: Check Directory
        run: |
          ls -a ./packages/plugin-core

      - name: Upload VSIX Artifact
        uses: actions/upload-artifact@v2
        with:
          name: vsix
          path: ${{ env.VSIX_PATH }}
