name: CI

on:
  push:
    branches:
      - master
      - dev
      - integ-publish
      - release/*
      - prerelease/*
      - kevin-*/*
  pull_request:
    branches:
      - "*"
      - "*/*"

jobs:
  test:
    strategy:
      # Allow other matrix jobs to continue after one fails, allowing us to
      # isolate platform-specific issues.
      fail-fast: false

      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        node-version:
          - 12.x
          - 14.x
        suite:
          - cli
          - plugin

        include:
          - os: macos-latest
            env: env
            versions: ""
          - os: ubuntu-latest
            env: env
            versions: ""
          # Running natively under Windows requires some further work on paths
          # and file access patterns.
          - os: windows-latest
            env: Get-ChildItem Env:\
            versions: choco --version

    timeout-minutes: 40

    runs-on: ${{ matrix.os }}

    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%S')"

      - name: Log date
        run: echo "${{ steps.date.outputs.date }}"

      - name: Set default run status
        run: |
          echo "::set-output name=last_run_status::default" > last_run_status
          echo "::set-output name=last_restore_node_status::default" > last_restore_node_status

      - name: Restore last run status
        id: last_run
        uses: actions/cache@v2
        with:
          path: |
            last_run_status
          key: ${{ github.run_id }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.suite }}-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ github.run_id }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.suite }}-

      - name: Set last run status
        id: last_run_status
        run: cat last_run_status

      - name: Restore last run status
        id: last_run_node
        uses: actions/cache@v2
        with:
          path: |
            last_restore_node_status
          key: ${{ github.run_id }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.suite }}-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ github.run_id }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.suite }}-

      - name: Set last run status
        id: last_restore_node_status
        run: cat last_restore_node_status

      - name: Print files
        shell: bash
        run: |
          echo "Cache hit: ${{steps.last_run_status.outputs.last_run_status}}"
          echo "Cache hit: ${{steps.last_restore_node_status.outputs.last_restore_node_status}}"
          echo "Cache hit: ${{steps.last_run_status.outputs.last_restore_node_windows_status}}"

      - name: Gather environment data
        run: |
          ${{ matrix.env }}
          node --version
          npm --version
          yarn --version

      - name: Checkout source
        if: steps.last_run_status.outputs.last_run_status != 'success'
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        if: steps.last_run_status.outputs.last_run_status != 'success'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Retain Node modules across builds; some packages download/build binaries
      # here.
      - name: Restore Node modules cache
        if: runner.os != 'Windows' && steps.last_run_status.outputs.last_restore_node_status != 'success'
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: |
            node_modules
            packages/*/node_modules
            packages/*/.vscode-test
          key: ${{ runner.os }}-${{ matrix.node-version }}-node-modules-1-${{ hashFiles('yarn.lock')}}

      - name: Restore Node modules cache for Windows
        if: runner.os == 'Windows' && steps.last_run_status.outputs.last_restore_node_windows_status != 'success'
        uses: actions/cache@v2
        id: node-modules-cache-windows
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: Save restore node status non-windows
        if: runner.os != 'Windows' && steps.last_run_status.outputs.last_restore_node_status != 'success'
        run: echo "::set-output name=last_restore_node_status::${{ steps.node-modules-cache.outcome }}" > last_restore_node_status

      - name: Save restore node status windows
        if: runner.os == 'Windows' && steps.last_run_status.outputs.last_restore_node_windows_status != 'success'
        run: echo "::set-output name=last_restore_node_windows_status::${{ steps.node-modules-cache-windows.outcome }}" > last_restore_node_windows_status

      - name: Set up Node.js ${{ matrix.node-version }}
        if: steps.last_run_status.outputs.last_run_status != 'success'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Publish tests won't work if we haven't configured our committer details.
      - name: Configure Git user
        run: |
          git config --global user.name CI
          git config --global user.email ci@dendron.so

      - name: Initialize
        id: init_run
        if: steps.last_run_status.outputs.last_init_status != 'success'
        run: yarn ci:init
        shell: bash

      - name: Save initialize run status
        if: steps.last_run_status.outputs.last_init_status != 'success'
        run: echo "::set-output name=last_init_status::${{ steps.init_run.outcome }}" > last_init_status

      - name: Start Xvfb
        if: runner.os == 'Linux' && matrix.suite == 'plugin' && steps.last_run_status.outputs.last_run_status != 'success'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo 'DISPLAY=:99.0' >>$GITHUB_ENV

      - name: Download notes.zip
        if: runner.os == 'Linux' && steps.last_run_status.outputs.last_run_status != 'success'
        uses: wei/curl@master
        with:
          args: -LO https://artifacts-prod-artifactb7980f61-19orqnnuurvwy.s3.us-west-2.amazonaws.com/artifacts/dendron-site.zip

      - name: Unzip notes.zip
        if: runner.os == 'Linux' && steps.last_run_status.outputs.last_run_status != 'success'
        run: |
          unzip dendron-site.zip -d packages/nextjs-template
          pwd

      - name: Run cypress
        if: runner.os == 'Linux' && steps.last_run_status.outputs.last_run_status != 'success'
        uses: cypress-io/github-action@v2
        with:
          build: "yarn run template:export"
          start: "yarn run template:start"
          project: ./packages/nextjs-template

      - name: Run tests
        id: test_run
        if: steps.last_run_status.outputs.last_run_status != 'success'
        run: yarn ci:test:${{ matrix.suite }}
        timeout-minutes: 30

      - name: Save run status
        if: steps.last_run_status.outputs.last_run_status != 'success'
        run: echo "::set-output name=last_run_status::${{ steps.test_run.outcome }}" > last_run_status
